name: Weekly Progress Report

on:
  schedule:
    - cron: '0 9 * * 1' # 毎週月曜9:00 UTC
  workflow_dispatch:

jobs:
  weekly-progress-report:
    runs-on: ubuntu-latest
    steps:
      - name: Generate Weekly Progress Report
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_PROJECT_AUTOMATION }}
          script: |
            const reportIssueNumber = 11; // コメント投稿先のIssue番号
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const lastWeek = new Date();
            lastWeek.setDate(lastWeek.getDate() - 7);
            const lastWeekISO = lastWeek.toISOString();

            const issues = await github.paginate(github.rest.issues.listForRepo, {
              owner,
              repo,
              since: lastWeekISO,
              state: "all",
              per_page: 100,
            });

            const closedIssues = issues.filter(i => i.state === "closed" && !i.pull_request);
            const openedIssues = issues.filter(i => i.state === "open" && !i.pull_request);
            const mergedPRs = issues.filter(i => i.pull_request && i.state === "closed");

            const milestones = await github.rest.issues.listMilestones({
              owner,
              repo,
              state: "open"
            });

            let milestoneProgress = "";
            for (const m of milestones.data) {
              milestoneProgress += `- ${m.title}: ${m.open_issues} open / ${m.closed_issues} closed\n`;
            }

            // ラベル別集計
            const labelCount = {};
            issues.forEach(issue => {
              issue.labels.forEach(label => {
                if (label.name.startsWith('priority:') || label.name.startsWith('type:') || label.name.startsWith('area:')) {
                  labelCount[label.name] = (labelCount[label.name] || 0) + 1;
                }
              });
            });

            let labelStats = "";
            for (const [label, count] of Object.entries(labelCount)) {
              labelStats += `- ${label}: ${count}件\n`;
            }

            // Projectカラムごとのタスク数取得
            const projectId = "PVT_kwHOAAkYos4A1Ltq"; // 固定
            const projectData = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        fieldValues(first: 10) {
                          nodes {
                            ... on ProjectV2ItemFieldSingleSelectValue {
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `, { projectId });

            const columnCount = {};
            projectData.node.items.nodes.forEach(item => {
              const status = item.fieldValues.nodes.find(f => f.name);
              const name = status ? status.name : "Unknown";
              columnCount[name] = (columnCount[name] || 0) + 1;
            });

            let columnStats = "";
            for (const [col, count] of Object.entries(columnCount)) {
              columnStats += `- ${col}: ${count}件\n`;
            }

            const report = `
              🗓️ **Weekly Progress Report**

              - 新規Issue数: ${openedIssues.length}
              - クローズされたIssue数: ${closedIssues.length}
              - マージされたPR数: ${mergedPRs.length}

              🎯 アクティブなマイルストーン
              ${milestoneProgress || "なし"}

              📌 Projectカラムごとのタスク数
              ${columnStats}

              🗂️ ラベル別統計
              ${labelStats || "該当なし"}
            `;

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: reportIssueNumber,
              body: report,
            });

            console.log("✅ Weekly progress report posted.");
