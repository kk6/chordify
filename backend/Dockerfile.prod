# syntax=docker/dockerfile:1.10

# === Build Stage ===
FROM python:3.12-slim AS builder
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# Disable Python downloads, because we want to use the system interpreter
ENV UV_PYTHON_DOWNLOADS=0

# Change the working directory to the `app` directory
WORKDIR /app

# Create virtual environment
RUN uv venv .venv

# Install dependencies from lockfile
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --python .venv/bin/python --frozen --no-install-project --no-editable

# Copy the project into the intermediate image
COPY . /app

# Install project itself
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --python .venv/bin/python --frozen

# Collect static files for production (if needed)
RUN python manage.py collectstatic --noinput

# === Final Stage ===
FROM python:3.12-slim

# Install dependencies for production
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -r app && useradd -r -g app app

# Copy the application from the builder
COPY --from=builder --chown=app:app /app /app

# Copy collected static files separately for potential volume mounting
COPY --from=builder --chown=app:app /app/staticfiles /app/staticfiles

# Place executables in the environment at the front of the path
ENV PATH="/app/.venv/bin:$PATH"

# Set production environment variables
ENV DJANGO_SETTINGS_MODULE=chordify.settings.production
ENV PYTHONUNBUFFERED=1

EXPOSE 8000

WORKDIR /app

# Add healthcheck for container orchestration systems
HEALTHCHECK --interval=30s --timeout=3s \
  CMD curl -f http://localhost:8000/health/ || exit 1

# Switch to non-root user
USER app

# Production: Run as ASGI server with uvicorn
# workers: number of processes (typically CPU cores Ã— 2 + 1 is recommended)
# --lifespan=on: enable application lifespan events
# --proxy-headers: trust proxy headers (when behind Nginx or similar)
CMD ["uvicorn", "chordify.asgi:application", "--host", "0.0.0.0", "--port", "8000", "--workers", "4", "--lifespan", "on", "--proxy-headers"]
